package tests.languages.php;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.Collection;
import java.util.HashMap;
import java.util.stream.Collectors;

import org.junit.Before;

import ast.ASTNode;
import ast.functionDef.FunctionDef;
import ast.php.functionDef.PHPFunctionDef;
import ast.php.functionDef.TopLevelFunctionDef;
import cfg.ASTToCFGConverter;
import cfg.CFG;
import cfg.CFGEdge;
import cfg.nodes.ASTNodeContainer;
import cfg.nodes.AbstractCFGNode;
import cfg.nodes.CFGNode;
import ddg.CFGAndUDGToDefUseCFG;
import ddg.DDGCreator;
import ddg.DataDependenceGraph.DDG;
import ddg.DefUseCFG.DefUseCFG;
import inputModules.csv.KeyedCSV.exceptions.InvalidCSVFile;
import inputModules.csv.csvFuncExtractor.CSVFunctionExtractor;
import languages.php.cfg.PHPCFGFactory;
import tests.languages.php.PHPCSVBasedTest;
import udg.CFGToUDGConverter;
import udg.useDefGraph.UseDefGraph;

public class PHPCSVFunctionConverterBasedTest extends PHPCSVBasedTest {

	private ASTToCFGConverter ast2cfgConverter;
	private CSVFunctionExtractor extractor;

	/* ***** */
	/* Setup */
	/* ***** */
	
	@Before
	public void init() {
		super.init();
		
		// initialize AST to CFG converter
		this.ast2cfgConverter = new ASTToCFGConverter();
		this.ast2cfgConverter.setLanguage("PHP");
		
		// initialize a function extractor
		this.extractor = new CSVFunctionExtractor();
		this.extractor.setLanguage("PHP");
	}

	
	/* ************/
	/* Extractors */
	/* ************/
	
	/* 
	 * Note: for testing, use either:
	 * 
	 * - getTopFuncAST(String) which hands a given CSV sample to the PHP CSV node and egde
	 *   interpreters directly and assumes that this sample only contains top-level code to
	 *   be tested.
	 *   
	 * - getAllFuncASTs(String) which hands a given CSV sample to the PHP CSV function extractor
	 *   first, which in turn uses the PHP CSV node and edge interpreters to build ASTs for
	 *   each found function. This is useful in case a particular function (or several) are to
	 *   be analyzed.
	 */
	
	/**
	 * This function is used for tests that handle code contained entirely
	 * in a single artificial toplevel PHP function.
	 * 
	 * Precondition: This function assumes that the
	 * AST node with the lowest id in the CSV nodes file is a TopLevelFunctionDef.
	 * (Note that directory, file and entry/exit nodes are not AST nodes.)
	 * For CSV files generated by the phpjoern parser, this is indeed always
	 * the case.
	 */
	protected FunctionDef getTopFuncAST( String testDir)
			throws IOException, InvalidCSVFile {
		
		handleCSVFiles( testDir);

		ASTNode node = ast.getNodeWithLowestId();
		
		assert node instanceof TopLevelFunctionDef;
		
		return (FunctionDef)node;
	}
	
	protected HashMap<String,FunctionDef> getAllFuncASTs( String testDir)
			throws IOException, InvalidCSVFile {
		
		HashMap<String,FunctionDef> functions = new HashMap<String,FunctionDef>();
		
	    BufferedReader nodeFileReader = new BufferedReader(new FileReader(getSampleDir() + File.separator + testDir + File.separator + nodesFile));
	    BufferedReader edgeFileReader = new BufferedReader(new FileReader(getSampleDir() + File.separator + testDir + File.separator + edgesFile));
		
		this.extractor.initialize(nodeFileReader, edgeFileReader);
		PHPFunctionDef function;
		while( (function = (PHPFunctionDef)extractor.getNextFunction()) != null)
			functions.put( function.getName(), function);

		return functions;
	}
	
	protected CFG getTopCFGForCSVFiles(String testDir)
			throws IOException, InvalidCSVFile {
		
		FunctionDef node = getTopFuncAST(testDir);
		CFG cfg = getCFGForFuncAST(node);

		return cfg;
	}
	
	protected HashMap<String,CFG> getAllCFGsForCSVFiles(String testDir)
			throws IOException, InvalidCSVFile {
		
		HashMap<String,CFG> cfgs = new HashMap<String,CFG>();
		
		HashMap<String,FunctionDef> functions = getAllFuncASTs(testDir);
		for( String name : functions.keySet()) {

			CFG cfg = getCFGForFuncAST(functions.get(name));
			cfgs.put( name, cfg);
		}
		
		return cfgs;
	}
	
	
	/* ******************** */
	/* Conversion functions */
	/* ******************** */
	
	/**
	 * Creates and returns a CFG for a given AST function node.
	 */
	protected CFG getCFGForFuncAST(FunctionDef node)
			throws IOException, InvalidCSVFile
	{
		CFG cfg = this.ast2cfgConverter.convert(node);

		System.out.println();
		System.out.println("CFG (" + node + ")\n~~~");
		System.out.println(cfg);
		
		return cfg;
	}
	
	/**
	 * Creates and returns a UDG for a given CFG.
	 */
	protected UseDefGraph getUDGForCFG(CFG cfg)
			throws IOException, InvalidCSVFile
	{
		CFGToUDGConverter cfgToUDG = new CFGToUDGConverter();
		cfgToUDG.setLanguage("PHP");
		
		return cfgToUDG.convert(cfg);
	}
	
	/**
	 * Creates and returns a DDG for a given CFG and UDG.
	 */
	protected DDG getDDGForCFGAndUDG(CFG cfg, UseDefGraph udg) {
		
		CFGAndUDGToDefUseCFG udgAndCfgToDefUseCFG = new CFGAndUDGToDefUseCFG();
		DefUseCFG defUseCFG = udgAndCfgToDefUseCFG.convert(cfg, udg);

		DDGCreator ddgCreator = new DDGCreator();
		
		return ddgCreator.createForDefUseCFG(defUseCFG);
	}
	

	
	/* ****************************** */
	/* Test helper functions for CFGs */
	/* ****************************** */

	/**
	 * Checks whether an edge exists in a given CFG from a given
	 * source node to a given destination node with a given label.
	 */
	protected boolean edgeExists(CFG cfg, long srcId, long dstId, String label) {
		
		Collection<CFGEdge> cfgEdges = cfg.getEdges();

		for(CFGEdge edge : cfgEdges) {
			
			if( getCFGNodeId(edge.getSource()) == srcId
					&& getCFGNodeId(edge.getDestination()) == dstId
					&& edge.getLabel().equals( label))
				return true;
		}

		return false;
	}
	
	protected boolean edgeExists(CFG cfg, CFGNode src, CFGNode dst, String label) {

		return edgeExists( cfg, getCFGNodeId(src), getCFGNodeId(dst), label);
	}
	
	protected boolean edgeExists(CFG cfg, CFGNode src, long dstId, String label) {

		return edgeExists( cfg, getCFGNodeId(src), dstId, label);
	}
	
	protected boolean edgeExists(CFG cfg, long srcId, CFGNode dst, String label) {

		return edgeExists( cfg, srcId, getCFGNodeId(dst), label);
	}
	
	private long getCFGNodeId(CFGNode node) {
		
		// CFG nodes that are AST node containers have their ids stored in their AST node;
		// abstract nodes such as entry or exit nodes have their id set internally.
		return (node instanceof ASTNodeContainer)
				? ((ASTNodeContainer)node).getASTNode().getNodeId()
				: ((AbstractCFGNode)node).getNodeId();
	}
	
	protected Collection<CFGNode> getNodesOfType(CFG cfg, String typeName) {
		
		Collection<CFGNode> vertices = cfg.getVertices();

		return (Collection<CFGNode>)vertices.stream().
				filter(x -> x.getClass().getSimpleName().equals(typeName))
				.collect(Collectors.toList());
	}
	
	
	
	
	
	
	
	/* ********** */
	/* DEPRECATED */
	/* ********** */
		
	
	/* "lower-level" functions that:
	 * - take an AST as two CSV strings instead of a directory name
	 * - use PHPCFGFactory's convert(ASTNode) to create a CFG instead of newInstance(ASTNode)
	 */
	
	/**
	 * Creates and returns an AST for two given CSV strings (nodes and edges),
	 * and returns the AST node with the lowest id.
	 */
	@Deprecated
	protected ASTNode getASTForCSVLines(String nodeLines, String edgeLines)
			throws IOException, InvalidCSVFile
	{
		handle(nodeLines, edgeLines);

		return ast.getNodeWithLowestId();
	}

	@Deprecated
	protected CFG getCFGForCSVLines(String nodeLines, String edgeLines)
			throws IOException, InvalidCSVFile {
		
		ASTNode node = getASTForCSVLines(nodeLines, edgeLines);
		CFG cfg = PHPCFGFactory.convert(node);
		
		System.out.println();
		System.out.println("CFG\n~~");
		System.out.println(cfg);
		
		return cfg;
	}
	
	
	// Deprecated functions to remove
	
	/**
	 * Creates and returns a CFG for a given AST.
	 */
	protected CFG getCFGForAST(ASTNode node)
			throws IOException, InvalidCSVFile
	{
		CFG cfg = PHPCFGFactory.convert(node);

		System.out.println();
		System.out.println("CFG (" + node + ")\n~~~");
		System.out.println(cfg);
		
		return cfg;
	}
	
	/**
	 * Initializes the function extractor for two given CSV strings (nodes and edges).
	 */
	@Deprecated
	protected void initFunctionExtractor(String nodeLines, String edgeLines)
			throws IOException, InvalidCSVFile
	{
		StringReader nodeReader = new StringReader(nodeLines);
		StringReader edgeReader = new StringReader(edgeLines);
		
		this.extractor.initialize(nodeReader, edgeReader);
	}
	
	/**
	 * Obtains and returns a function AST from the function extractor.
	 * 
	 * Note: initFunctionExtractor(String,String) must be called
	 * prior to calling this function!
	 */
	@Deprecated
	protected FunctionDef getASTOfNextFunction()
			throws IOException, InvalidCSVFile
	{
		FunctionDef rootnode = extractor.getNextFunction();
		return rootnode;
	}


}
