// Generated from src/antlr/Module.g4 by ANTLR 4.0.1-SNAPSHOT

	package antlr;


  import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.tree.ParseTreeListener;

public interface ModuleListener extends ParseTreeListener<Token> {
	void enterDeclarator(ModuleParser.DeclaratorContext ctx);
	void exitDeclarator(ModuleParser.DeclaratorContext ctx);
	void enterTemplate_decl_start(ModuleParser.Template_decl_startContext ctx);
	void exitTemplate_decl_start(ModuleParser.Template_decl_startContext ctx);
	void enterFunction_decl_specifiers(ModuleParser.Function_decl_specifiersContext ctx);
	void exitFunction_decl_specifiers(ModuleParser.Function_decl_specifiersContext ctx);
	void enterType_suffix(ModuleParser.Type_suffixContext ctx);
	void exitType_suffix(ModuleParser.Type_suffixContext ctx);
	void enterFunction_argument_list(ModuleParser.Function_argument_listContext ctx);
	void exitFunction_argument_list(ModuleParser.Function_argument_listContext ctx);
	void enterMultiplicative_expression(ModuleParser.Multiplicative_expressionContext ctx);
	void exitMultiplicative_expression(ModuleParser.Multiplicative_expressionContext ctx);
	void enterCompound_statement(ModuleParser.Compound_statementContext ctx);
	void exitCompound_statement(ModuleParser.Compound_statementContext ctx);
	void enterNo_squares_or_semicolon(ModuleParser.No_squares_or_semicolonContext ctx);
	void exitNo_squares_or_semicolon(ModuleParser.No_squares_or_semicolonContext ctx);
	void enterAssign_expr(ModuleParser.Assign_exprContext ctx);
	void exitAssign_expr(ModuleParser.Assign_exprContext ctx);
	void enterCast_expression(ModuleParser.Cast_expressionContext ctx);
	void exitCast_expression(ModuleParser.Cast_expressionContext ctx);
	void enterNo_angle_brackets_or_brackets(ModuleParser.No_angle_brackets_or_bracketsContext ctx);
	void exitNo_angle_brackets_or_brackets(ModuleParser.No_angle_brackets_or_bracketsContext ctx);
	void enterEquality_expression(ModuleParser.Equality_expressionContext ctx);
	void exitEquality_expression(ModuleParser.Equality_expressionContext ctx);
	void enterParameter_decl_clause(ModuleParser.Parameter_decl_clauseContext ctx);
	void exitParameter_decl_clause(ModuleParser.Parameter_decl_clauseContext ctx);
	void enterNo_comma_or_semicolon(ModuleParser.No_comma_or_semicolonContext ctx);
	void exitNo_comma_or_semicolon(ModuleParser.No_comma_or_semicolonContext ctx);
	void enterMemberAccess(ModuleParser.MemberAccessContext ctx);
	void exitMemberAccess(ModuleParser.MemberAccessContext ctx);
	void enterBase_class(ModuleParser.Base_classContext ctx);
	void exitBase_class(ModuleParser.Base_classContext ctx);
	void enterFunction_name(ModuleParser.Function_nameContext ctx);
	void exitFunction_name(ModuleParser.Function_nameContext ctx);
	void enterParameter_name(ModuleParser.Parameter_nameContext ctx);
	void exitParameter_name(ModuleParser.Parameter_nameContext ctx);
	void enterCtor_list(ModuleParser.Ctor_listContext ctx);
	void exitCtor_list(ModuleParser.Ctor_listContext ctx);
	void enterAccess_specifier(ModuleParser.Access_specifierContext ctx);
	void exitAccess_specifier(ModuleParser.Access_specifierContext ctx);
	void enterCtor_expr(ModuleParser.Ctor_exprContext ctx);
	void exitCtor_expr(ModuleParser.Ctor_exprContext ctx);
	void enterInit_declarator_list(ModuleParser.Init_declarator_listContext ctx);
	void exitInit_declarator_list(ModuleParser.Init_declarator_listContext ctx);
	void enterAssign_water_l2(ModuleParser.Assign_water_l2Context ctx);
	void exitAssign_water_l2(ModuleParser.Assign_water_l2Context ctx);
	void enterInit_declarator(ModuleParser.Init_declaratorContext ctx);
	void exitInit_declarator(ModuleParser.Init_declaratorContext ctx);
	void enterArrayIndexing(ModuleParser.ArrayIndexingContext ctx);
	void exitArrayIndexing(ModuleParser.ArrayIndexingContext ctx);
	void enterParameter_decl(ModuleParser.Parameter_declContext ctx);
	void exitParameter_decl(ModuleParser.Parameter_declContext ctx);
	void enterNumber(ModuleParser.NumberContext ctx);
	void exitNumber(ModuleParser.NumberContext ctx);
	void enterBase_type(ModuleParser.Base_typeContext ctx);
	void exitBase_type(ModuleParser.Base_typeContext ctx);
	void enterReturn_type(ModuleParser.Return_typeContext ctx);
	void exitReturn_type(ModuleParser.Return_typeContext ctx);
	void enterCode(ModuleParser.CodeContext ctx);
	void exitCode(ModuleParser.CodeContext ctx);
	void enterCtor_initializer(ModuleParser.Ctor_initializerContext ctx);
	void exitCtor_initializer(ModuleParser.Ctor_initializerContext ctx);
	void enterExclusive_or_expression(ModuleParser.Exclusive_or_expressionContext ctx);
	void exitExclusive_or_expression(ModuleParser.Exclusive_or_expressionContext ctx);
	void enterAssign_expr_w_(ModuleParser.Assign_expr_w_Context ctx);
	void exitAssign_expr_w_(ModuleParser.Assign_expr_w_Context ctx);
	void enterParam_type_id(ModuleParser.Param_type_idContext ctx);
	void exitParam_type_id(ModuleParser.Param_type_idContext ctx);
	void enterPtrMemberAccess(ModuleParser.PtrMemberAccessContext ctx);
	void exitPtrMemberAccess(ModuleParser.PtrMemberAccessContext ctx);
	void enterInitializer_list(ModuleParser.Initializer_listContext ctx);
	void exitInitializer_list(ModuleParser.Initializer_listContext ctx);
	void enterAdditive_expression(ModuleParser.Additive_expressionContext ctx);
	void exitAdditive_expression(ModuleParser.Additive_expressionContext ctx);
	void enterUnary_operator(ModuleParser.Unary_operatorContext ctx);
	void exitUnary_operator(ModuleParser.Unary_operatorContext ctx);
	void enterNo_squares(ModuleParser.No_squaresContext ctx);
	void exitNo_squares(ModuleParser.No_squaresContext ctx);
	void enterDeclByClass(ModuleParser.DeclByClassContext ctx);
	void exitDeclByClass(ModuleParser.DeclByClassContext ctx);
	void enterShift_expression(ModuleParser.Shift_expressionContext ctx);
	void exitShift_expression(ModuleParser.Shift_expressionContext ctx);
	void enterType_name(ModuleParser.Type_nameContext ctx);
	void exitType_name(ModuleParser.Type_nameContext ctx);
	void enterNo_brackets_curlies_or_squares(ModuleParser.No_brackets_curlies_or_squaresContext ctx);
	void exitNo_brackets_curlies_or_squares(ModuleParser.No_brackets_curlies_or_squaresContext ctx);
	void enterIdentifier(ModuleParser.IdentifierContext ctx);
	void exitIdentifier(ModuleParser.IdentifierContext ctx);
	void enterFuncCall(ModuleParser.FuncCallContext ctx);
	void exitFuncCall(ModuleParser.FuncCallContext ctx);
	void enterPrimaryOnly(ModuleParser.PrimaryOnlyContext ctx);
	void exitPrimaryOnly(ModuleParser.PrimaryOnlyContext ctx);
	void enterInclusive_or_expression(ModuleParser.Inclusive_or_expressionContext ctx);
	void exitInclusive_or_expression(ModuleParser.Inclusive_or_expressionContext ctx);
	void enterFunction_param_list(ModuleParser.Function_param_listContext ctx);
	void exitFunction_param_list(ModuleParser.Function_param_listContext ctx);
	void enterNo_brackets_or_semicolon(ModuleParser.No_brackets_or_semicolonContext ctx);
	void exitNo_brackets_or_semicolon(ModuleParser.No_brackets_or_semicolonContext ctx);
	void enterBase_classes(ModuleParser.Base_classesContext ctx);
	void exitBase_classes(ModuleParser.Base_classesContext ctx);
	void enterIncDecOp(ModuleParser.IncDecOpContext ctx);
	void exitIncDecOp(ModuleParser.IncDecOpContext ctx);
	void enterEquality_operator(ModuleParser.Equality_operatorContext ctx);
	void exitEquality_operator(ModuleParser.Equality_operatorContext ctx);
	void enterNo_curlies(ModuleParser.No_curliesContext ctx);
	void exitNo_curlies(ModuleParser.No_curliesContext ctx);
	void enterParam_type_list(ModuleParser.Param_type_listContext ctx);
	void exitParam_type_list(ModuleParser.Param_type_listContext ctx);
	void enterExpr(ModuleParser.ExprContext ctx);
	void exitExpr(ModuleParser.ExprContext ctx);
	void enterClass_name(ModuleParser.Class_nameContext ctx);
	void exitClass_name(ModuleParser.Class_nameContext ctx);
	void enterRelational_expression(ModuleParser.Relational_expressionContext ctx);
	void exitRelational_expression(ModuleParser.Relational_expressionContext ctx);
	void enterSimple_decl(ModuleParser.Simple_declContext ctx);
	void exitSimple_decl(ModuleParser.Simple_declContext ctx);
	void enterParam_decl_specifiers(ModuleParser.Param_decl_specifiersContext ctx);
	void exitParam_decl_specifiers(ModuleParser.Param_decl_specifiersContext ctx);
	void enterAssignment_operator(ModuleParser.Assignment_operatorContext ctx);
	void exitAssignment_operator(ModuleParser.Assignment_operatorContext ctx);
	void enterParam_type(ModuleParser.Param_typeContext ctx);
	void exitParam_type(ModuleParser.Param_typeContext ctx);
	void enterType_id_list(ModuleParser.Type_id_listContext ctx);
	void exitType_id_list(ModuleParser.Type_id_listContext ctx);
	void enterFunction_argument(ModuleParser.Function_argumentContext ctx);
	void exitFunction_argument(ModuleParser.Function_argumentContext ctx);
	void enterUnary_expression(ModuleParser.Unary_expressionContext ctx);
	void exitUnary_expression(ModuleParser.Unary_expressionContext ctx);
	void enterPtrs(ModuleParser.PtrsContext ctx);
	void exitPtrs(ModuleParser.PtrsContext ctx);
	void enterConstant_expr_w_(ModuleParser.Constant_expr_w_Context ctx);
	void exitConstant_expr_w_(ModuleParser.Constant_expr_w_Context ctx);
	void enterWater(ModuleParser.WaterContext ctx);
	void exitWater(ModuleParser.WaterContext ctx);
	void enterOr_expression(ModuleParser.Or_expressionContext ctx);
	void exitOr_expression(ModuleParser.Or_expressionContext ctx);
	void enterConstant(ModuleParser.ConstantContext ctx);
	void exitConstant(ModuleParser.ConstantContext ctx);
	void enterAssign_expr_w__l2(ModuleParser.Assign_expr_w__l2Context ctx);
	void exitAssign_expr_w__l2(ModuleParser.Assign_expr_w__l2Context ctx);
	void enterFunction_def(ModuleParser.Function_defContext ctx);
	void exitFunction_def(ModuleParser.Function_defContext ctx);
	void enterUsing_directive(ModuleParser.Using_directiveContext ctx);
	void exitUsing_directive(ModuleParser.Using_directiveContext ctx);
	void enterRelational_operator(ModuleParser.Relational_operatorContext ctx);
	void exitRelational_operator(ModuleParser.Relational_operatorContext ctx);
	void enterPtr_operator(ModuleParser.Ptr_operatorContext ctx);
	void exitPtr_operator(ModuleParser.Ptr_operatorContext ctx);
	void enterOperator(ModuleParser.OperatorContext ctx);
	void exitOperator(ModuleParser.OperatorContext ctx);
	void enterClass_def(ModuleParser.Class_defContext ctx);
	void exitClass_def(ModuleParser.Class_defContext ctx);
	void enterInitializer_id(ModuleParser.Initializer_idContext ctx);
	void exitInitializer_id(ModuleParser.Initializer_idContext ctx);
	void enterInc_dec(ModuleParser.Inc_decContext ctx);
	void exitInc_dec(ModuleParser.Inc_decContext ctx);
	void enterConditional_expression(ModuleParser.Conditional_expressionContext ctx);
	void exitConditional_expression(ModuleParser.Conditional_expressionContext ctx);
	void enterAnd_expression(ModuleParser.And_expressionContext ctx);
	void exitAnd_expression(ModuleParser.And_expressionContext ctx);
	void enterPrimary_expression(ModuleParser.Primary_expressionContext ctx);
	void exitPrimary_expression(ModuleParser.Primary_expressionContext ctx);
	void enterException_specification(ModuleParser.Exception_specificationContext ctx);
	void exitException_specification(ModuleParser.Exception_specificationContext ctx);
	void enterTemplate_param_list(ModuleParser.Template_param_listContext ctx);
	void exitTemplate_param_list(ModuleParser.Template_param_listContext ctx);
	void enterDeclByType(ModuleParser.DeclByTypeContext ctx);
	void exitDeclByType(ModuleParser.DeclByTypeContext ctx);
	void enterParameter_id(ModuleParser.Parameter_idContext ctx);
	void exitParameter_id(ModuleParser.Parameter_idContext ctx);
	void enterNo_brackets(ModuleParser.No_bracketsContext ctx);
	void exitNo_brackets(ModuleParser.No_bracketsContext ctx);
	void enterBit_and_expression(ModuleParser.Bit_and_expressionContext ctx);
	void exitBit_and_expression(ModuleParser.Bit_and_expressionContext ctx);
	void enterInitializer(ModuleParser.InitializerContext ctx);
	void exitInitializer(ModuleParser.InitializerContext ctx);
	void enterCast_target(ModuleParser.Cast_targetContext ctx);
	void exitCast_target(ModuleParser.Cast_targetContext ctx);
	void enterAssign_water(ModuleParser.Assign_waterContext ctx);
	void exitAssign_water(ModuleParser.Assign_waterContext ctx);
}