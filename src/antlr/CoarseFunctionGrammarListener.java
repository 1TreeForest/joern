// Generated from CoarseFunctionGrammar.g4 by ANTLR 4.0.1-SNAPSHOT

	package antlr;


  import java.util.Stack;

import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.Token;

public interface CoarseFunctionGrammarListener extends ParseTreeListener<Token> {
	void enterCoarse_content_elem(CoarseFunctionGrammarParser.Coarse_content_elemContext ctx);
	void exitCoarse_content_elem(CoarseFunctionGrammarParser.Coarse_content_elemContext ctx);
	void enterDeclarator(CoarseFunctionGrammarParser.DeclaratorContext ctx);
	void exitDeclarator(CoarseFunctionGrammarParser.DeclaratorContext ctx);
	void enterTemplate_decl_start(CoarseFunctionGrammarParser.Template_decl_startContext ctx);
	void exitTemplate_decl_start(CoarseFunctionGrammarParser.Template_decl_startContext ctx);
	void enterFunction_decl_specifiers(CoarseFunctionGrammarParser.Function_decl_specifiersContext ctx);
	void exitFunction_decl_specifiers(CoarseFunctionGrammarParser.Function_decl_specifiersContext ctx);
	void enterType_suffix(CoarseFunctionGrammarParser.Type_suffixContext ctx);
	void exitType_suffix(CoarseFunctionGrammarParser.Type_suffixContext ctx);
	void enterFunction_argument_list(CoarseFunctionGrammarParser.Function_argument_listContext ctx);
	void exitFunction_argument_list(CoarseFunctionGrammarParser.Function_argument_listContext ctx);
	void enterMultiplicative_expression(CoarseFunctionGrammarParser.Multiplicative_expressionContext ctx);
	void exitMultiplicative_expression(CoarseFunctionGrammarParser.Multiplicative_expressionContext ctx);
	void enterNo_squares_or_semicolon(CoarseFunctionGrammarParser.No_squares_or_semicolonContext ctx);
	void exitNo_squares_or_semicolon(CoarseFunctionGrammarParser.No_squares_or_semicolonContext ctx);
	void enterAssign_expr(CoarseFunctionGrammarParser.Assign_exprContext ctx);
	void exitAssign_expr(CoarseFunctionGrammarParser.Assign_exprContext ctx);
	void enterCast_expression(CoarseFunctionGrammarParser.Cast_expressionContext ctx);
	void exitCast_expression(CoarseFunctionGrammarParser.Cast_expressionContext ctx);
	void enterNo_angle_brackets_or_brackets(CoarseFunctionGrammarParser.No_angle_brackets_or_bracketsContext ctx);
	void exitNo_angle_brackets_or_brackets(CoarseFunctionGrammarParser.No_angle_brackets_or_bracketsContext ctx);
	void enterEquality_expression(CoarseFunctionGrammarParser.Equality_expressionContext ctx);
	void exitEquality_expression(CoarseFunctionGrammarParser.Equality_expressionContext ctx);
	void enterNo_comma_or_semicolon(CoarseFunctionGrammarParser.No_comma_or_semicolonContext ctx);
	void exitNo_comma_or_semicolon(CoarseFunctionGrammarParser.No_comma_or_semicolonContext ctx);
	void enterMemberAccess(CoarseFunctionGrammarParser.MemberAccessContext ctx);
	void exitMemberAccess(CoarseFunctionGrammarParser.MemberAccessContext ctx);
	void enterBase_class(CoarseFunctionGrammarParser.Base_classContext ctx);
	void exitBase_class(CoarseFunctionGrammarParser.Base_classContext ctx);
	void enterParameter_name(CoarseFunctionGrammarParser.Parameter_nameContext ctx);
	void exitParameter_name(CoarseFunctionGrammarParser.Parameter_nameContext ctx);
	void enterAccess_specifier(CoarseFunctionGrammarParser.Access_specifierContext ctx);
	void exitAccess_specifier(CoarseFunctionGrammarParser.Access_specifierContext ctx);
	void enterInit_declarator_list(CoarseFunctionGrammarParser.Init_declarator_listContext ctx);
	void exitInit_declarator_list(CoarseFunctionGrammarParser.Init_declarator_listContext ctx);
	void enterAssign_water_l2(CoarseFunctionGrammarParser.Assign_water_l2Context ctx);
	void exitAssign_water_l2(CoarseFunctionGrammarParser.Assign_water_l2Context ctx);
	void enterArrayIndexing(CoarseFunctionGrammarParser.ArrayIndexingContext ctx);
	void exitArrayIndexing(CoarseFunctionGrammarParser.ArrayIndexingContext ctx);
	void enterNumber(CoarseFunctionGrammarParser.NumberContext ctx);
	void exitNumber(CoarseFunctionGrammarParser.NumberContext ctx);
	void enterBase_type(CoarseFunctionGrammarParser.Base_typeContext ctx);
	void exitBase_type(CoarseFunctionGrammarParser.Base_typeContext ctx);
	void enterExclusive_or_expression(CoarseFunctionGrammarParser.Exclusive_or_expressionContext ctx);
	void exitExclusive_or_expression(CoarseFunctionGrammarParser.Exclusive_or_expressionContext ctx);
	void enterParam_type_id(CoarseFunctionGrammarParser.Param_type_idContext ctx);
	void exitParam_type_id(CoarseFunctionGrammarParser.Param_type_idContext ctx);
	void enterInitDeclWithCall(CoarseFunctionGrammarParser.InitDeclWithCallContext ctx);
	void exitInitDeclWithCall(CoarseFunctionGrammarParser.InitDeclWithCallContext ctx);
	void enterPtrMemberAccess(CoarseFunctionGrammarParser.PtrMemberAccessContext ctx);
	void exitPtrMemberAccess(CoarseFunctionGrammarParser.PtrMemberAccessContext ctx);
	void enterInitializer_list(CoarseFunctionGrammarParser.Initializer_listContext ctx);
	void exitInitializer_list(CoarseFunctionGrammarParser.Initializer_listContext ctx);
	void enterAdditive_expression(CoarseFunctionGrammarParser.Additive_expressionContext ctx);
	void exitAdditive_expression(CoarseFunctionGrammarParser.Additive_expressionContext ctx);
	void enterNo_squares(CoarseFunctionGrammarParser.No_squaresContext ctx);
	void exitNo_squares(CoarseFunctionGrammarParser.No_squaresContext ctx);
	void enterCoarse_content(CoarseFunctionGrammarParser.Coarse_contentContext ctx);
	void exitCoarse_content(CoarseFunctionGrammarParser.Coarse_contentContext ctx);
	void enterUnary_operator(CoarseFunctionGrammarParser.Unary_operatorContext ctx);
	void exitUnary_operator(CoarseFunctionGrammarParser.Unary_operatorContext ctx);
	void enterDeclByClass(CoarseFunctionGrammarParser.DeclByClassContext ctx);
	void exitDeclByClass(CoarseFunctionGrammarParser.DeclByClassContext ctx);
	void enterShift_expression(CoarseFunctionGrammarParser.Shift_expressionContext ctx);
	void exitShift_expression(CoarseFunctionGrammarParser.Shift_expressionContext ctx);
	void enterType_name(CoarseFunctionGrammarParser.Type_nameContext ctx);
	void exitType_name(CoarseFunctionGrammarParser.Type_nameContext ctx);
	void enterNo_brackets_curlies_or_squares(CoarseFunctionGrammarParser.No_brackets_curlies_or_squaresContext ctx);
	void exitNo_brackets_curlies_or_squares(CoarseFunctionGrammarParser.No_brackets_curlies_or_squaresContext ctx);
	void enterIdentifier(CoarseFunctionGrammarParser.IdentifierContext ctx);
	void exitIdentifier(CoarseFunctionGrammarParser.IdentifierContext ctx);
	void enterFuncCall(CoarseFunctionGrammarParser.FuncCallContext ctx);
	void exitFuncCall(CoarseFunctionGrammarParser.FuncCallContext ctx);
	void enterPrimaryOnly(CoarseFunctionGrammarParser.PrimaryOnlyContext ctx);
	void exitPrimaryOnly(CoarseFunctionGrammarParser.PrimaryOnlyContext ctx);
	void enterInclusive_or_expression(CoarseFunctionGrammarParser.Inclusive_or_expressionContext ctx);
	void exitInclusive_or_expression(CoarseFunctionGrammarParser.Inclusive_or_expressionContext ctx);
	void enterNo_brackets_or_semicolon(CoarseFunctionGrammarParser.No_brackets_or_semicolonContext ctx);
	void exitNo_brackets_or_semicolon(CoarseFunctionGrammarParser.No_brackets_or_semicolonContext ctx);
	void enterBase_classes(CoarseFunctionGrammarParser.Base_classesContext ctx);
	void exitBase_classes(CoarseFunctionGrammarParser.Base_classesContext ctx);
	void enterIncDecOp(CoarseFunctionGrammarParser.IncDecOpContext ctx);
	void exitIncDecOp(CoarseFunctionGrammarParser.IncDecOpContext ctx);
	void enterNo_curlies(CoarseFunctionGrammarParser.No_curliesContext ctx);
	void exitNo_curlies(CoarseFunctionGrammarParser.No_curliesContext ctx);
	void enterEquality_operator(CoarseFunctionGrammarParser.Equality_operatorContext ctx);
	void exitEquality_operator(CoarseFunctionGrammarParser.Equality_operatorContext ctx);
	void enterParam_type_list(CoarseFunctionGrammarParser.Param_type_listContext ctx);
	void exitParam_type_list(CoarseFunctionGrammarParser.Param_type_listContext ctx);
	void enterExpr(CoarseFunctionGrammarParser.ExprContext ctx);
	void exitExpr(CoarseFunctionGrammarParser.ExprContext ctx);
	void enterClass_name(CoarseFunctionGrammarParser.Class_nameContext ctx);
	void exitClass_name(CoarseFunctionGrammarParser.Class_nameContext ctx);
	void enterRelational_expression(CoarseFunctionGrammarParser.Relational_expressionContext ctx);
	void exitRelational_expression(CoarseFunctionGrammarParser.Relational_expressionContext ctx);
	void enterSimple_decl(CoarseFunctionGrammarParser.Simple_declContext ctx);
	void exitSimple_decl(CoarseFunctionGrammarParser.Simple_declContext ctx);
	void enterParam_decl_specifiers(CoarseFunctionGrammarParser.Param_decl_specifiersContext ctx);
	void exitParam_decl_specifiers(CoarseFunctionGrammarParser.Param_decl_specifiersContext ctx);
	void enterAssignment_operator(CoarseFunctionGrammarParser.Assignment_operatorContext ctx);
	void exitAssignment_operator(CoarseFunctionGrammarParser.Assignment_operatorContext ctx);
	void enterParam_type(CoarseFunctionGrammarParser.Param_typeContext ctx);
	void exitParam_type(CoarseFunctionGrammarParser.Param_typeContext ctx);
	void enterFunction_argument(CoarseFunctionGrammarParser.Function_argumentContext ctx);
	void exitFunction_argument(CoarseFunctionGrammarParser.Function_argumentContext ctx);
	void enterUnary_expression(CoarseFunctionGrammarParser.Unary_expressionContext ctx);
	void exitUnary_expression(CoarseFunctionGrammarParser.Unary_expressionContext ctx);
	void enterPtrs(CoarseFunctionGrammarParser.PtrsContext ctx);
	void exitPtrs(CoarseFunctionGrammarParser.PtrsContext ctx);
	void enterInitDeclWithAssign(CoarseFunctionGrammarParser.InitDeclWithAssignContext ctx);
	void exitInitDeclWithAssign(CoarseFunctionGrammarParser.InitDeclWithAssignContext ctx);
	void enterWater(CoarseFunctionGrammarParser.WaterContext ctx);
	void exitWater(CoarseFunctionGrammarParser.WaterContext ctx);
	void enterConstant(CoarseFunctionGrammarParser.ConstantContext ctx);
	void exitConstant(CoarseFunctionGrammarParser.ConstantContext ctx);
	void enterOr_expression(CoarseFunctionGrammarParser.Or_expressionContext ctx);
	void exitOr_expression(CoarseFunctionGrammarParser.Or_expressionContext ctx);
	void enterRelational_operator(CoarseFunctionGrammarParser.Relational_operatorContext ctx);
	void exitRelational_operator(CoarseFunctionGrammarParser.Relational_operatorContext ctx);
	void enterPtr_operator(CoarseFunctionGrammarParser.Ptr_operatorContext ctx);
	void exitPtr_operator(CoarseFunctionGrammarParser.Ptr_operatorContext ctx);
	void enterOperator(CoarseFunctionGrammarParser.OperatorContext ctx);
	void exitOperator(CoarseFunctionGrammarParser.OperatorContext ctx);
	void enterClass_def(CoarseFunctionGrammarParser.Class_defContext ctx);
	void exitClass_def(CoarseFunctionGrammarParser.Class_defContext ctx);
	void enterInc_dec(CoarseFunctionGrammarParser.Inc_decContext ctx);
	void exitInc_dec(CoarseFunctionGrammarParser.Inc_decContext ctx);
	void enterInitDeclSimple(CoarseFunctionGrammarParser.InitDeclSimpleContext ctx);
	void exitInitDeclSimple(CoarseFunctionGrammarParser.InitDeclSimpleContext ctx);
	void enterConditional_expression(CoarseFunctionGrammarParser.Conditional_expressionContext ctx);
	void exitConditional_expression(CoarseFunctionGrammarParser.Conditional_expressionContext ctx);
	void enterPrimary_expression(CoarseFunctionGrammarParser.Primary_expressionContext ctx);
	void exitPrimary_expression(CoarseFunctionGrammarParser.Primary_expressionContext ctx);
	void enterAnd_expression(CoarseFunctionGrammarParser.And_expressionContext ctx);
	void exitAnd_expression(CoarseFunctionGrammarParser.And_expressionContext ctx);
	void enterTemplate_param_list(CoarseFunctionGrammarParser.Template_param_listContext ctx);
	void exitTemplate_param_list(CoarseFunctionGrammarParser.Template_param_listContext ctx);
	void enterDeclByType(CoarseFunctionGrammarParser.DeclByTypeContext ctx);
	void exitDeclByType(CoarseFunctionGrammarParser.DeclByTypeContext ctx);
	void enterNo_brackets(CoarseFunctionGrammarParser.No_bracketsContext ctx);
	void exitNo_brackets(CoarseFunctionGrammarParser.No_bracketsContext ctx);
	void enterBit_and_expression(CoarseFunctionGrammarParser.Bit_and_expressionContext ctx);
	void exitBit_and_expression(CoarseFunctionGrammarParser.Bit_and_expressionContext ctx);
	void enterInitializer(CoarseFunctionGrammarParser.InitializerContext ctx);
	void exitInitializer(CoarseFunctionGrammarParser.InitializerContext ctx);
	void enterAssign_water(CoarseFunctionGrammarParser.Assign_waterContext ctx);
	void exitAssign_water(CoarseFunctionGrammarParser.Assign_waterContext ctx);
	void enterCast_target(CoarseFunctionGrammarParser.Cast_targetContext ctx);
	void exitCast_target(CoarseFunctionGrammarParser.Cast_targetContext ctx);
}