def reguiredGradleVersionMajor = 2
def requiredGradleVersionMinor = 0
def (gradleVersionMajor, gradleVersionMinor) =
    getGradle().gradleVersion.tokenize('.').collect {it.toInteger()}

if ( gradleVersionMajor < reguiredGradleVersionMajor ||
        (gradleVersionMajor == reguiredGradleVersionMajor &&
        gradleVersionMinor < requiredGradleVersionMinor))
{
    throw new GradleException("Gradle version " +
            "$reguiredGradleVersionMajor.$requiredGradleVersionMinor and higher required.")
}


allprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }
}

task deploy(dependsOn: build) << {
    copy {
        into "projects/octopus/octopus-server/plugins"
        from fileTree("projects/joern-plugins").files
        include '**/*.jar'
        exclude '**/*-plain.jar'
        includeEmptyDirs = false
    }
}


configure(project(':projects:joern-plugins').subprojects) {
    task jarWithDep(type: Jar) {
        doFirst {
            def pluginJars = configurations.runtime.minus(project(':projects:octopus:octopus-server').configurations.runtime).asCollection()
            pluginJars.remove(new File(project(':projects:octopus:octopus-server').buildDir.toString() + '/libs/octopus-server.jar'))
            pluginJars.add(new File(project.buildDir.toString() + '/libs/' + project.name + '-plain.jar'))
            baseName = project.name
            from { pluginJars.collect { it.isDirectory() ? it : zipTree(it) } }
            with jar
        }
    }
    jar {
        baseName = project.name + '-plain'
    }

    jarWithDep.dependsOn(jar)
    assemble.dependsOn(jarWithDep)
}


dependencies{
	compile group: 'com.tunnelvisionlabs', name: 'antlr4-runtime', version: '4.5.3'
	compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
	compile group: 'org.apache.commons', name: 'commons-csv', version: '1.2'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'	
	compile group: 'org.neo4j', name: 'neo4j', version: '2.1.8'
	compile group: 'junit', name: 'junit', version: '4.12'
}

task copyToLib(type: Copy) {
    into "jars"
    from configurations.runtime
}


task buildTestDatabase << {
     println './rebuildTestDB.sh'.execute().text
}

copyToLib.dependsOn subprojects.build

build.dependsOn subprojects.build
build.dependsOn copyToLib
